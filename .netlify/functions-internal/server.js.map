{
  "version": 3,
  "sources": ["<stdin>", "../../node_modules/@remix-run/dev/dist/compiler/shims/react.ts", "../../app/entry.server.tsx", "C:\\Users\\user\\Documents\\otherprojs\\writing\\strapi\\Strapi-v4-Authentication-with-Remix\\remix-profiles\\app\\root.tsx", "../../app/components/SiteHeader.tsx", "../../app/utils/session.server.ts", "C:\\Users\\user\\Documents\\otherprojs\\writing\\strapi\\Strapi-v4-Authentication-with-Remix\\remix-profiles\\app\\routes\\forgot-password.tsx", "../../app/utils/slugify.ts", "../../app/models/profiles.server.ts", "C:\\Users\\user\\Documents\\otherprojs\\writing\\strapi\\Strapi-v4-Authentication-with-Remix\\remix-profiles\\app\\routes\\reset-password.tsx", "C:\\Users\\user\\Documents\\otherprojs\\writing\\strapi\\Strapi-v4-Authentication-with-Remix\\remix-profiles\\app\\routes\\register.tsx", "../../app/components/ProfileForm.tsx", "C:\\Users\\user\\Documents\\otherprojs\\writing\\strapi\\Strapi-v4-Authentication-with-Remix\\remix-profiles\\app\\routes\\sign-out.tsx", "C:\\Users\\user\\Documents\\otherprojs\\writing\\strapi\\Strapi-v4-Authentication-with-Remix\\remix-profiles\\app\\routes\\sign-in.tsx", "C:\\Users\\user\\Documents\\otherprojs\\writing\\strapi\\Strapi-v4-Authentication-with-Remix\\remix-profiles\\app\\routes\\$slug.tsx", "../../app/components/ProfileCard.tsx", "C:\\Users\\user\\Documents\\otherprojs\\writing\\strapi\\Strapi-v4-Authentication-with-Remix\\remix-profiles\\app\\routes\\index.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as React from \"react\";\nexport { React };\n", "import type { EntryContext } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { renderToString } from \"react-dom/server\";\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  let markup = renderToString(\n    <RemixServer context={remixContext} url={request.url} />\n  );\n\n  responseHeaders.set(\"Content-Type\", \"text/html\");\n\n  return new Response(\"<!DOCTYPE html>\" + markup, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  });\n}\n", "// ./app/root.jsx\n\nimport { MetaFunction, LinksFunction, json, LoaderFunction } from \"@remix-run/node\";\n\n// import compiled styles\nimport styles from \"./styles/app.css\";\n\nimport { Links, LiveReload, Meta, Outlet, Scripts, ScrollRestoration, useLoaderData } from \"@remix-run/react\";\n\n// import site header component\nimport SiteHeader from \"./components/SiteHeader\";\nimport { getUserData } from \"./utils/session.server\";\n\ntype LoaderData = {\n  userData: Awaited<ReturnType<typeof getUserData>>;\n};\n\n// add site meta\nexport const meta: MetaFunction = () => ({\n  charset: \"utf-8\",\n  title: \"Profiles | Find & connect with people\",\n  viewport: \"width=device-width,initial-scale=1\",\n});\n\n// add links to site head\nexport const links: LinksFunction = () => {\n  return [{ rel: \"stylesheet\", href: styles }];\n};\n\n// add environment variables to loader\nexport const loader: LoaderFunction = async ({ request }) => {\n  return json<LoaderData>({\n    userData: await getUserData(request),\n  });\n};\n\nexport default function App() {\n  const { userData } = useLoaderData() as LoaderData;\n\n  return (\n    <html lang=\"en\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <main className=\"site-main\">\n          {/* place site header above app outlet */}\n          <SiteHeader user={userData?.user} />\n          <Outlet />\n          <ScrollRestoration />\n          <Scripts />\n          <LiveReload />\n        </main>\n      </body>\n    </html>\n  );\n}\n", "// ./app/components/SiteHeader.tsx\r\n\r\n// import Remix's link component\r\nimport { Form, Link, useTransition } from \"@remix-run/react\";\r\n\r\n// import type definitions\r\nimport { Profile } from \"~/utils/types\";\r\n\r\n// component accepts `user` prop to determine if user is logged in\r\nconst SiteHeader = ({user} : {user?: Profile | undefined}) => {\r\n  const transition = useTransition()\r\n  return (\r\n    <header className=\"site-header\">\r\n      <div className=\"wrapper\">\r\n        <figure className=\"site-logo\"><Link to=\"/\"><h1>Profiles</h1></Link></figure>\r\n        <nav className=\"site-nav\">\r\n          <ul className=\"links\">\r\n            {/* show sign out link if user is logged in */}\r\n            {user?.id ?\r\n              <>\r\n                {/* link to user profile */}\r\n                <li>\r\n                  <Link to={`/${user?.slug}`}> Hey, {user?.username}! </Link>\r\n                </li>\r\n                {/* Form component to send POST request to the sign out route */}\r\n                <Form action=\"/sign-out\" method=\"post\" className=\"link\">\r\n                  <button type=\"submit\" disabled={transition.state != \"idle\"} >\r\n                    {transition.state == \"idle\" ? \"Sign Out\" : \"Loading...\"}\r\n                  </button>\r\n                </Form>\r\n              </> :\r\n              <>\r\n                {/* show sign in and register link if user is not logged in */}\r\n                <li className=\"link\"><Link to=\"/sign-in\">Sign In</Link></li>\r\n                <li className=\"link\"><Link to=\"/register\">Register</Link></li>\r\n              </>\r\n            }\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default SiteHeader;\r\n", "// ./app/utils/session.server.ts\r\n\r\nimport { createCookieSessionStorage, redirect } from \"@remix-run/node\";\r\nimport { LoginResponse } from \"./types\";\r\n\r\n// initialize createCookieSession\r\nconst { getSession, commitSession, destroySession } = createCookieSessionStorage({\r\n  cookie: {\r\n    name: \"userSession\",\r\n    // normally you want this to be `secure: true`\r\n    // but that doesn't work on localhost for Safari\r\n    // https://web.dev/when-to-use-local-https/\r\n    secure: process.env.NODE_ENV === \"production\",\r\n    sameSite: \"lax\",\r\n    path: \"/\",\r\n    maxAge: 60 * 60 * 24 * 30,\r\n    httpOnly: true,\r\n  }\r\n})\r\n\r\n// fucntion to save user data to session\r\nexport const createUserSession = async (userData: LoginResponse, redirectTo: string) => {\r\n  const session = await getSession()\r\n  session.set(\"userData\", userData);\r\n\r\n  console.log({ session });\r\n\r\n  return redirect(redirectTo, {\r\n    headers: {\r\n      \"Set-Cookie\": await commitSession(session)\r\n    }\r\n  })\r\n}\r\n\r\n// get cookies from request\r\nconst getUserSession = (request: Request) => {\r\n  return getSession(request.headers.get(\"Cookie\"))\r\n}\r\n\r\n// function to get user data from session\r\nexport const getUserData = async (request: Request): Promise<LoginResponse | null> => {\r\n  const session = await getUserSession(request)\r\n  const userData = session.get(\"userData\")\r\n\r\n  console.log({ userData });\r\n\r\n  if (!userData) return null\r\n  return userData\r\n}\r\n\r\n// fucntion to redirect user to login if no user data found in session\r\nexport const requireUser = async (request: Request, redirectTo: string = new URL(request.url).pathname): Promise<LoginResponse | null> => {\r\n  const userData = await getUserData(request)\r\n\r\n  if (!userData) {\r\n    const searchParams = new URLSearchParams([\r\n      [\"redirectTo\", redirectTo]\r\n    ])\r\n    throw redirect(`/sign-in?${searchParams}`)\r\n  }\r\n\r\n  return userData\r\n}\r\n\r\n// function to remove user data from session, logging user out\r\nexport const logout = async (request: Request) => {\r\n  const session = await getUserSession(request);\r\n\r\n  return redirect(\"/sign-in\", {\r\n    headers: {\r\n      \"Set-Cookie\": await destroySession(session)\r\n    }\r\n  })\r\n}\r\n", "import { ActionFunction, json } from \"@remix-run/node\";\r\nimport { Form, useActionData, useTransition } from \"@remix-run/react\";\r\nimport { sendResetMail } from \"~/models/profiles.server\";\r\n\r\n\r\n// action function to get form values and run reset mail function\r\nexport const action: ActionFunction = async ({ request }) => {\r\n  const formData = await request.formData();\r\n  const email = formData.get(\"email\");\r\n\r\n  const response = await sendResetMail(email);\r\n\r\n  return json(response);\r\n};\r\n\r\nconst ForgotPass = () => {\r\n  const transition = useTransition();\r\n  const data = useActionData();\r\n\r\n  return (\r\n    <section className=\"site-section profiles-section\">\r\n      <div className=\"wrapper\">\r\n        <header className=\"section-header\">\r\n          <h2 className=\"text-4xl\">Forgot password</h2>\r\n          <p>Click the button below to send the reset link to your registerd email</p>\r\n        </header>\r\n\r\n        <Form method=\"post\" className=\"form\">\r\n          <div className=\"wrapper\">\r\n            <p>{data?.ok ? \"Link sent! Check your mail. Can't find it in the inbox? Check Spam\" : \"\"}</p>\r\n            <div className=\"form-control\">\r\n              <label htmlFor=\"email\">Email</label>\r\n              <input id=\"email\" name=\"email\" type=\"email\" className=\"form-input\" required />\r\n            </div>\r\n            <div className=\"action-cont mt-4\">\r\n              <button className=\"cta\"> {transition.state == \"submitting\" ? \"Sending\" : \"Send link\"} </button>\r\n            </div>\r\n          </div>\r\n        </Form>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ForgotPass;\r\n", "\r\nconst slugify = (str: string | null | undefined) =>\r\n  str ? str\r\n    .toLowerCase()\r\n    .trim()\r\n    .replace(/[^\\w\\s-]/g, '')\r\n    .replace(/[\\s_-]+/g, '-')\r\n    .replace(/^-+|-+$/g, '') : str\r\n\r\nexport default slugify", "// ./app/models/profiles.server.ts\r\n\r\n// import types\r\nimport slugify from \"~/utils/slugify\"\r\nimport { ErrorResponse, LoginActionData, LoginResponse, Profile, ProfileData, RegisterActionData } from \"~/utils/types\"\r\n\r\n// Strapi API URL from environment varaibles\r\nconst strapiApiUrl = process.env.STRAPI_API_URL\r\n\r\n// helper function to throw errors is any\r\n// const catchError = (res: any) => { if (res.error) throw Error(JSON.stringify(res.error)) }\r\n\r\n// function to fetch all profiles\r\nexport const getProfiles = async (): Promise<Array<Profile>> => {\r\n  const profiles = await fetch(`${strapiApiUrl}/users/?populate=profilePic`)\r\n  let response = await profiles.json()\r\n  // catchError(response)\r\n  return response\r\n}\r\n\r\n// function to get a single profile by it's slug\r\nexport const getProfileBySlug = async (slug: string | undefined): Promise<Profile> => {\r\n  const profile = await fetch(`${strapiApiUrl}/users?populate=profilePic&filters[slug]=${slug}`)\r\n  let response = await profile.json()\r\n  console.log({ response });\r\n  // catchError(response)\r\n\r\n  // since the request is filter, it returns an array\r\n  // here we return the first itm in the array\r\n  // since the slug is unique, it'll only return one item\r\n  return response[0]\r\n}\r\n\r\n// function to sign in\r\nexport const signIn = async (data: LoginActionData): Promise<LoginResponse> => {\r\n  console.log({ data });\r\n\r\n  // make POST request to Strapi Auth URL\r\n  const profile = await fetch(`${strapiApiUrl}/auth/local`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(data)\r\n  })\r\n\r\n  let response = await profile.json()\r\n\r\n  console.log({ response });\r\n\r\n  // return login response\r\n  return response\r\n}\r\n\r\n// function to register user\r\nexport const register = async (data: RegisterActionData): Promise<LoginResponse> => {\r\n  // generate slug from username\r\n  let slug = slugify(data.username?.toString())\r\n  data.slug = slug\r\n\r\n\r\n  // make POST request to Strapi Register Auth URL\r\n  const profile = await fetch(`${strapiApiUrl}/auth/local/register`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(data)\r\n  })\r\n\r\n  // console.log({ profile });\r\n\r\n  // get response from request\r\n  let response = await profile.json()\r\n\r\n  // console.log({ response });\r\n\r\n  // return register response\r\n  return response\r\n}\r\n\r\n// function to update a profile\r\nexport const updateProfile = async (data: ProfileData, token: string | undefined): Promise<Profile & ErrorResponse> => {\r\n  // get id from data\r\n  const { id } = data\r\n\r\n  // PUT request to update data\r\n  const profile = await fetch(`${strapiApiUrl}/users/${id}`, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      // set the auth token to the user's jwt\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify(data)\r\n  })\r\n\r\n  let response = await profile.json()\r\n\r\n  console.log({ response });\r\n\r\n  return response\r\n}\r\n\r\n// function to send password reset email\r\nexport const sendResetMail = async (email: string | File | null | undefined) => {\r\n  const response = await (await fetch(`${strapiApiUrl}/auth/forgot-password`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n\r\n    },\r\n    body: JSON.stringify({ email })\r\n  })).json()\r\n\r\n  return response\r\n}\r\n\r\n// function to reset password\r\nexport const resetPass = async ({ password, passwordConfirmation, code }: { password: File | string | null | undefined, passwordConfirmation: File | string | null | undefined, code: File | string | null | undefined }) => {\r\n  const response = await (await fetch(`${strapiApiUrl}/auth/reset-password`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      password,\r\n      passwordConfirmation,\r\n      code\r\n    })\r\n  })).json()\r\n\r\n  return response\r\n}\r\n", "// ./app/routes/reset-password.tsx\r\n\r\nimport { ActionFunction, json, LoaderFunction, redirect } from \"@remix-run/node\";\r\nimport { Form, useActionData, useLoaderData, useTransition } from \"@remix-run/react\";\r\nimport { resetPass } from \"~/models/profiles.server\";\r\n\r\ntype LoaderData = {\r\n  code: string | undefined;\r\n};\r\n\r\n// get code from URL parameters\r\nexport const loader: LoaderFunction = async ({ request }) => {\r\n  const url = new URL(request.url);\r\n  const code = url.searchParams.get(\"code\");\r\n\r\n  // take user to homepage if there's no code in the url\r\n  if (!code) return redirect(\"/sign-in\");\r\n\r\n  return json<LoaderData>({\r\n    code: code,\r\n  });\r\n};\r\n\r\n// get password and code and send reset password request\r\nexport const action: ActionFunction = async ({ request }) => {\r\n  const formData = await request.formData();\r\n\r\n  const code = formData.get(\"code\");\r\n  const password = formData.get(\"password\");\r\n  const passwordConfirmation = formData.get(\"confirmPassword\");\r\n\r\n  const response = await resetPass({ password, passwordConfirmation, code });\r\n\r\n  // return error is passwords don't match\r\n  if (password != passwordConfirmation) return json({ confirmPassword: \"Passwords should match\" });\r\n\r\n  return json(response);\r\n};\r\n\r\nconst ResetPass = () => {\r\n  const transition = useTransition();\r\n  const error = useActionData();\r\n  const { code } = useLoaderData() as LoaderData;\r\n\r\n  return (\r\n    <section className=\"site-section profiles-section\">\r\n      <div className=\"wrapper\">\r\n        <header className=\"section-header\">\r\n          <h2 className=\"text-4xl\">Reset password</h2>\r\n          <p>Enter your new password</p>\r\n        </header>\r\n\r\n        <Form method=\"post\" className=\"form\">\r\n          <input value={code} type=\"hidden\" id=\"code\" name=\"code\" required />\r\n          <div className=\"wrapper\">\r\n            <div className=\"form-control\">\r\n              <label htmlFor=\"job-title\">Password</label>\r\n              <input id=\"password\" name=\"password\" type=\"password\" className=\"form-input\" required />\r\n            </div>\r\n            <div className=\"form-control\">\r\n              <label htmlFor=\"job-title\">Confirm password</label>\r\n              <input id=\"confirmPassword\" name=\"confirmPassword\" type=\"password\" className=\"form-input\" required />\r\n              {error?.confirmPassword ? <em className=\"text-red-600\">{error.confirmPassword}</em> : null}\r\n            </div>\r\n            <div className=\"action-cont mt-4\">\r\n              <button className=\"cta\"> {transition.state == \"submitting\" ? \"Sending\" : \"Reset password\"} </button>\r\n            </div>\r\n          </div>\r\n        </Form>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ResetPass;\r\n", "// ./app/routes/register.tsx\r\n\r\nimport { ActionFunction, json } from \"@remix-run/node\";\r\nimport { useActionData } from \"@remix-run/react\";\r\nimport ProfileForm from \"~/components/ProfileForm\";\r\nimport { register } from \"~/models/profiles.server\";\r\nimport { createUserSession } from \"~/utils/session.server\";\r\nimport { ErrorResponse, RegisterActionData } from \"~/utils/types\";\r\n\r\nexport const action: ActionFunction = async ({ request }) => {\r\n  try {\r\n    // get request form data\r\n    const formData = await request.formData();\r\n\r\n    // get form input values\r\n    const email = formData.get(\"email\");\r\n    const password = formData.get(\"password\");\r\n    const username = formData.get(\"username\");\r\n    const title = formData.get(\"job-title\");\r\n    const twitterUsername = formData.get(\"twitterUsername\");\r\n    const bio = formData.get(\"bio\");\r\n    const websiteUrl = formData.get(\"website\");\r\n\r\n    const errors: RegisterActionData = {\r\n      email: email ? null : \"Email is required\",\r\n      password: password ? null : \"Password is required\",\r\n      username: username ? null : \"Username is required\",\r\n      title: title ? null : \"Job title is required\",\r\n    };\r\n\r\n    const hasErrors = Object.values(errors).some((errorMessage) => errorMessage);\r\n\r\n    if (hasErrors) throw errors;\r\n\r\n    console.log({ email, password, username, title, twitterUsername, bio, websiteUrl });\r\n\r\n    // function to register user with user details\r\n    const { jwt, user, error } = await register({ email, password, username, title, twitterUsername, bio, websiteUrl });\r\n    console.log({ jwt, user, error });\r\n\r\n    // throw strapi error message if strapi returns an error\r\n    if (error) throw { [error.name]: error.message };\r\n\r\n    // create user session\r\n    return createUserSession({ jwt, user }, \"/\");\r\n  } catch (error) {\r\n    // return error response\r\n    return json(error);\r\n  }\r\n};\r\n\r\nconst Register = () => {\r\n  const errors = useActionData();\r\n  console.log({ errors });\r\n\r\n  return (\r\n    <section className=\"site-section profiles-section\">\r\n      <div className=\"wrapper\">\r\n        <header className=\"section-header\">\r\n          <h2 className=\"text-4xl\">Register</h2>\r\n          <p>Create a new profile</p>\r\n        </header>\r\n\r\n        {/* set form action to `login` and pass errors if any */}\r\n        <ProfileForm action=\"create\" errors={errors} />\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n", "// ./app/components/ProfileForm.tsx\r\n\r\nimport { Form, useTransition } from \"@remix-run/react\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\n// custom type declarations\r\nimport { Profile, ProfileFormProps } from \"~/utils/types\";\r\n\r\nconst ProfileForm = ({ profile, onModifyData, action, errors }: ProfileFormProps) => {\r\n  // get state of form\r\n  const transition = useTransition();\r\n\r\n  // state for user profile data\r\n  const [profileData, setProfileData] = useState(profile);\r\n\r\n  // state for user login information\r\n  const [authData, setAuthData] = useState({ email: \"\", password: \"\" });\r\n\r\n  // helper function to set profile data value\r\n  const updateField = (field: object) => setProfileData((value) => ({ ...value, ...field }));\r\n\r\n  // listen to changes to the profileData state\r\n  // run the onModifyData() function passing the profileData to it\r\n  //  this will snd the data to the parent component\r\n  useEffect(() => {\r\n    // run function if `onModifyData` is passed to the component\r\n    if (onModifyData) {\r\n      // depending on the action passed to the form\r\n      // select which data to send to parent when modified\r\n\r\n      // when action == create, send both the profile data and auth data\r\n      if (action == \"create\") onModifyData({ ...profileData, ...authData });\r\n      // when action == login, send only auth data\r\n      else if (action == \"login\") onModifyData(authData);\r\n      // send profile data by default (when action == edit)\r\n      else onModifyData(profileData);\r\n    }\r\n  }, [profileData, authData]);\r\n\r\n  return (\r\n    <Form method={action == \"edit\" ? \"put\" : \"post\"} className=\"form\">\r\n      <fieldset disabled={transition.state == \"submitting\"}>\r\n        <input value={profile?.id} type=\"hidden\" name=\"id\" required />\r\n        <div className=\"wrapper\">\r\n          {action != \"login\" && (\r\n            // profile edit input forms\r\n            <>\r\n              <div className=\"form-group\">\r\n                <div className=\"form-control\">\r\n                  <label htmlFor=\"username\">Name</label>\r\n                  <input\r\n                    onChange={(e) => updateField({ username: e.target.value })}\r\n                    value={profileData?.username}\r\n                    id=\"username\"\r\n                    name=\"username\"\r\n                    type=\"text\"\r\n                    className=\"form-input\"\r\n                    required\r\n                  />\r\n                  {errors?.username ? <em className=\"text-red-600\">{errors.username}</em> : null}\r\n                </div>\r\n                <div className=\"form-control\">\r\n                  <label htmlFor=\"twitterUsername\">Twitter username</label>\r\n                  <input\r\n                    onChange={(e) => updateField({ twitterUsername: e.target.value })}\r\n                    value={profileData?.twitterUsername}\r\n                    id=\"twitterUsername\"\r\n                    name=\"twitterUsername\"\r\n                    type=\"text\"\r\n                    className=\"form-input\"\r\n                    placeholder=\"Without the @\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"form-control\">\r\n                <label htmlFor=\"bio\">Bio</label>\r\n                <textarea\r\n                  onChange={(e) => updateField({ bio: e.target.value })}\r\n                  value={profileData?.bio}\r\n                  name=\"bio\"\r\n                  id=\"bio\"\r\n                  cols={30}\r\n                  rows={3}\r\n                  className=\"form-textarea\"\r\n                ></textarea>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <div className=\"form-control\">\r\n                  <label htmlFor=\"job-title\">Job title</label>\r\n                  <input\r\n                    onChange={(e) => updateField({ title: e.target.value })}\r\n                    value={profileData?.title}\r\n                    id=\"job-title\"\r\n                    name=\"job-title\"\r\n                    type=\"text\"\r\n                    className=\"form-input\"\r\n                  />\r\n                  {errors?.title ? <em className=\"text-red-600\">{errors.title}</em> : null}\r\n                </div>\r\n                <div className=\"form-control\">\r\n                  <label htmlFor=\"website\">Website link</label>\r\n                  <input\r\n                    onChange={(e) => updateField({ websiteUrl: e.target.value })}\r\n                    value={profileData?.websiteUrl}\r\n                    id=\"website\"\r\n                    name=\"website\"\r\n                    type=\"url\"\r\n                    className=\"form-input\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n          {action != \"edit\" && (\r\n            // user auth input forms\r\n            <>\r\n              <div className=\"form-control\">\r\n                <label htmlFor=\"job-title\">Email</label>\r\n                <input\r\n                  onChange={(e) => setAuthData((data) => ({ ...data, email: e.target.value }))}\r\n                  value={authData.email}\r\n                  id=\"email\"\r\n                  name=\"email\"\r\n                  type=\"email\"\r\n                  className=\"form-input\"\r\n                  required\r\n                />\r\n                {errors?.email ? <em className=\"text-red-600\">{errors.email}</em> : null}\r\n              </div>\r\n              <div className=\"form-control\">\r\n                <label htmlFor=\"job-title\">Password</label>\r\n                <input\r\n                  onChange={(e) => setAuthData((data) => ({ ...data, password: e.target.value }))}\r\n                  value={authData.password}\r\n                  id=\"password\"\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  className=\"form-input\"\r\n                />\r\n                {errors?.password ? <em className=\"text-red-600\">{errors.password}</em> : null}\r\n              </div>\r\n              {errors?.ValidationError ? <em className=\"text-red-600\">{errors.ValidationError}</em> : null}\r\n              {errors?.ApplicationError ? <em className=\"text-red-600\">{errors.ApplicationError}</em> : null}\r\n            </>\r\n          )}\r\n\r\n          <div className=\"action-cont mt-4\">\r\n            <button className=\"cta\"> {transition.state == \"submitting\" ? \"Submitting\" : \"Submit\"} </button>\r\n          </div>\r\n        </div>\r\n      </fieldset>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default ProfileForm;\r\n", "// ./app/routes/sign-out.tsx\r\n\r\nimport { ActionFunction, LoaderFunction, redirect } from \"@remix-run/node\";\r\nimport { logout } from \"~/utils/session.server\";\r\n\r\n// action to get the /sign-out request action from the sign out form\r\nexport const action: ActionFunction = async ({ request }) => {\r\n  return logout(request);\r\n};\r\n\r\n// loader to redirect to \"/\" after sign out action\r\nexport const loader: LoaderFunction = async () => {\r\n  return redirect(\"/\");\r\n};\r\n", "import { ActionFunction, json, redirect } from \"@remix-run/node\";\r\nimport { useActionData } from \"@remix-run/react\";\r\nimport ProfileForm from \"~/components/ProfileForm\";\r\nimport { signIn } from \"~/models/profiles.server\";\r\nimport { createUserSession } from \"~/utils/session.server\";\r\nimport { ErrorResponse, LoginActionData, LoginErrorResponse } from \"~/utils/types\";\r\n\r\nexport const action: ActionFunction = async ({ request }) => {\r\n  try {\r\n    // get request form data\r\n    const formData = await request.formData();\r\n\r\n    // get form values\r\n    const identifier = formData.get(\"email\");\r\n    const password = formData.get(\"password\");\r\n\r\n    console.log({ identifier, password });\r\n\r\n    // error object\r\n    // each error property is assigned null if it has a value\r\n    const errors: LoginActionData = {\r\n      identifier: identifier ? null : \"Email is required\",\r\n      password: password ? null : \"Password is required\",\r\n    };\r\n\r\n    // return true if any property in the error object has a value\r\n    const hasErrors = Object.values(errors).some((errorMessage) => errorMessage);\r\n\r\n    //\r\n    console.log({ hasErrors });\r\n\r\n    // throw the errors object if any error\r\n    if (hasErrors) throw errors;\r\n\r\n    console.log({ identifier, password });\r\n\r\n    // sign in user with identifier and password\r\n    let { jwt, user, error } = await signIn({ identifier, password });\r\n\r\n    console.log({ jwt, user, error });\r\n\r\n    // throw strapi error message if strapi returns an error\r\n    if (error) throw { [error.name]: error.message };\r\n\r\n    // create user session\r\n    return createUserSession({ jwt, user }, \"/\");\r\n  } catch (error) {\r\n    // return error response\r\n    return json<LoginErrorResponse>(error);\r\n  }\r\n};\r\n\r\nconst Login = () => {\r\n  const errors = useActionData();\r\n  console.log({ errors });\r\n\r\n  return (\r\n    <section className=\"site-section profiles-section\">\r\n      <div className=\"wrapper\">\r\n        <header className=\"section-header\">\r\n          <h2 className=\"text-4xl\">Sign in </h2>\r\n          <p>You have to log in to edit your profile</p>\r\n        </header>\r\n\r\n        {/* set form action to `login` and pass errors if any */}\r\n        <ProfileForm action=\"login\" errors={errors} />\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n", "// ./app/routes/$slug.tsx\r\n\r\nimport { json, LoaderFunction, ActionFunction, redirect } from \"@remix-run/node\";\r\nimport { useLoaderData, useActionData } from \"@remix-run/react\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport { updateProfile } from \"~/models/profiles.server\";\r\nimport { getProfileBySlug } from \"~/models/profiles.server\";\r\nimport { getUserData } from \"~/utils/session.server\";\r\n\r\nimport { Profile } from \"~/utils/types\";\r\nimport ProfileCard from \"~/components/ProfileCard\";\r\nimport ProfileForm from \"~/components/ProfileForm\";\r\n\r\n// type definition of Loader data\r\ntype Loaderdata = {\r\n  userData: Awaited<ReturnType<typeof getUserData>>;\r\n  profile: Awaited<ReturnType<typeof getProfileBySlug>>;\r\n};\r\n\r\n// action data type\r\ntype EditActionData =\r\n  | {\r\n      id: string | null;\r\n      username: string | null;\r\n      title: string | null;\r\n    }\r\n  | undefined;\r\n\r\n// loader function to get posts by slug\r\nexport const loader: LoaderFunction = async ({ params, request }) => {\r\n  return json<Loaderdata>({\r\n    userData: await getUserData(request),\r\n    profile: await getProfileBySlug(params.slug),\r\n  });\r\n};\r\n\r\n// action to handle form submission\r\nexport const action: ActionFunction = async ({ request }) => {\r\n  // get user data\r\n  const data = await getUserData(request)\r\n\r\n  // get request form data\r\n  const formData = await request.formData();\r\n\r\n  // get form values\r\n  const id = formData.get(\"id\");\r\n  const username = formData.get(\"username\");\r\n  const twitterUsername = formData.get(\"twitterUsername\");\r\n  const bio = formData.get(\"bio\");\r\n  const title = formData.get(\"job-title\");\r\n  const websiteUrl = formData.get(\"website\");\r\n  console.log({ id, username, twitterUsername, bio, title, websiteUrl });\r\n  // const user = await requireUser(request);\r\n  // console.log({ from: \"sess\", user });\r\n\r\n  // error object\r\n  // each error property is assigned null if it has a value\r\n  const errors: EditActionData = {\r\n    id: id ? null : \"Id is required\",\r\n    username: username ? null : \"username is required\",\r\n    title: title ? null : \"title is required\",\r\n  };\r\n\r\n  // return true if any property in the error object has a value\r\n  const hasErrors = Object.values(errors).some((errorMessage) => errorMessage);\r\n\r\n  // return the error object\r\n  if (hasErrors) return json<EditActionData>(errors);\r\n\r\n  // run the update profile function\r\n  // pass the user jwt to the function\r\n  await updateProfile({ id, username, twitterUsername, bio, title, websiteUrl }, data?.jwt);\r\n\r\n  // redirect users to home page\r\n  return null;\r\n};\r\n\r\nconst Profile = () => {\r\n  const { profile, userData } = useLoaderData() as Loaderdata;\r\n  const errors = useActionData();\r\n\r\n  const [profileData, setprofileData] = useState(profile);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  console.log({ userData, profile });\r\n\r\n  // useEffect(() => {\r\n  //   console.log({ profileData });\r\n  // }, [profileData]);\r\n\r\n  return (\r\n    <section className=\"site-section\">\r\n      <div className=\"wrapper flex items-center py-16 min-h-[calc(100vh-4rem)]\">\r\n        <div className=\"profile-cont w-full max-w-5xl m-auto\">\r\n          {profileData ? (\r\n            <>\r\n              {/* Profile card with `preview` = true */}\r\n              <ProfileCard profile={profileData} preview={true} />\r\n\r\n              {/* list of actions */}\r\n              <ul className=\"actions\">\r\n                <li className=\"action\">\r\n                  <button className=\"cta w-icon\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"icon stroke\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\r\n                      <path\r\n                        strokeLinecap=\"round\"\r\n                        strokeLinejoin=\"round\"\r\n                        d=\"M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z\"\r\n                      />\r\n                    </svg>\r\n                    <span>Share</span>\r\n                  </button>\r\n                </li>\r\n                {userData?.user?.id == profile.id && (\r\n                  <li className=\"action\">\r\n                    <button onClick={() => setIsEditing(!isEditing)} className=\"cta w-icon\">\r\n                      {!isEditing ? (\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"icon stroke\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\r\n                          <path\r\n                            strokeLinecap=\"round\"\r\n                            strokeLinejoin=\"round\"\r\n                            d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\"\r\n                          />\r\n                        </svg>\r\n                      ) : (\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"icon stroke\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\r\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n                        </svg>\r\n                      )}\r\n\r\n                      <span>{!isEditing ? \"Edit\" : \"Cancel\"}</span>\r\n                    </button>\r\n                  </li>\r\n                )}\r\n              </ul>\r\n            </>\r\n          ) : (\r\n            <p className=\"text-center\">Oops, that profile doesn't exist... yet</p>\r\n          )}\r\n\r\n          {/* display dynamic form component when user clicks on edit */}\r\n          {userData?.user?.id == profile?.id && isEditing && (\r\n            <ProfileForm errors={errors} profile={profile} action={\"edit\"} onModifyData={(value: Profile) => setprofileData(value)} />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n", "// ./app/components/ProfileCard.tsx\r\n\r\nimport { Link } from \"@remix-run/react\";\r\n\r\n// type definitions for Profile response\r\nimport { Profile } from \"~/utils/types\";\r\n\r\n\r\n// helper function to get image url for user\r\n// we're also using https://ui-avatars.com api to generate images\r\n// the function appends the image url returned\r\nconst getImgUrl = ({ url, username }: { url: string | undefined; username: string | undefined | \"A+N\" }) =>\r\n  url ? `${url}` : `https://ui-avatars.com/api/?name=${username?.replace(\" \", \"+\")}&background=2563eb&color=fff`;\r\n\r\n// component accepts `profile` prop which contains the user profile data and\r\n// `preview` prop which indicates whether the card is used in a list or\r\n// on its own in a dynamic page\r\nconst ProfileCard = ({ profile, preview }: { profile: Profile; preview: boolean }) => {\r\n  console.log({ profile });\r\n\r\n  return (\r\n    <>\r\n      {/* add the .preview class if `preview` == true */}\r\n      <article className={`profile ${preview ? \"preview\" : \"\"}`}>\r\n        <div className=\"wrapper\">\r\n          <div className=\"profile-pic-cont\">\r\n            <figure className=\"profile-pic img-cont\">\r\n              <img\r\n                src={getImgUrl({ url: profile.profilePic?.formats.small.url, username: profile.username })}\r\n                alt={`A photo of ${profile.username}`}\r\n                className=\"w-full\"\r\n              />\r\n            </figure>\r\n          </div>\r\n          <div className=\"profile-content\">\r\n            <header className=\"profile-header \">\r\n              <h3 className=\"username\">{profile.username}</h3>\r\n\r\n              {/* show twitter name if it exists */}\r\n              {profile.twitterUsername && (\r\n                <a href=\"https://twitter.com/miracleio\" className=\"twitter link\">\r\n                  @{profile.twitterUsername}\r\n                </a>\r\n              )}\r\n\r\n              {/* show bio if it exists */}\r\n              {profile.bio && <p className=\"bio\">{profile.bio}</p>}\r\n            </header>\r\n            <ul className=\"links\">\r\n              {/* show title if it exists */}\r\n              {profile.title && (\r\n                <li className=\"w-icon\">\r\n                  <svg className=\"icon stroke\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\r\n                    <path\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                      d=\"M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\"\r\n                    />\r\n                  </svg>\r\n                  <span> {profile.title} </span>\r\n                </li>\r\n              )}\r\n\r\n              {/* show website url if it exists */}\r\n              {profile.websiteUrl && (\r\n                <li className=\"w-icon\">\r\n                  <svg className=\"icon stroke\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\r\n                    <path\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                      d=\"M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1\"\r\n                    />\r\n                  </svg>\r\n                  <a href=\"http://miracleio.me\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"link\">\r\n                    {profile.websiteUrl}\r\n                  </a>\r\n                </li>\r\n              )}\r\n            </ul>\r\n\r\n            {/* hide footer in preview mode */}\r\n            {!preview && (\r\n              <footer className=\"grow flex items-end justify-end pt-4\">\r\n                {profile?.slug && (\r\n                  <Link to={profile?.slug}>\r\n                    <button className=\"cta w-icon\">\r\n                      <span>View profile</span>\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"icon stroke\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\r\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M17 8l4 4m0 0l-4 4m4-4H3\" />\r\n                      </svg>\r\n                    </button>\r\n                  </Link>\r\n                )}\r\n              </footer>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </article>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileCard;\r\n", "import { json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\n\n// import profile card component\nimport ProfileCard from \"~/components/ProfileCard\";\n\n// import get profiles function\nimport { getProfiles } from \"~/models/profiles.server\";\n\n// loader data type definition\ntype Loaderdata = {\n  // this implies that the \"profiles type is whatever type getProfiles resolves to\"\n  profiles: Awaited<ReturnType<typeof getProfiles>>;\n}\n\n// loader for route\nexport const loader = async () => {\n  return json<Loaderdata>({\n    profiles: await getProfiles(),\n  });\n};\n\nexport default function Index() {\n  const { profiles } = useLoaderData() as Loaderdata;\n\n  return (\n    <section className=\"site-section profiles-section\">\n      <div>\n        <header className=\"section-header\">\n          <h2 className=\"text-4xl\">Explore profiles</h2>\n          <p>Find and connect with amazing people all over the world!</p>\n        </header>\n        {profiles.length > 0 ? (\n          <ul className=\"profiles-list\">\n            {profiles.map((profile) => (\n              <li key={profile.id} className=\"profile-item\">\n                <ProfileCard profile={profile} preview={false} />\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p>No profiles yet \uD83D\uDE42</p>\n        )}{\" \"}\n      </div>\n    </section>\n  );\n}\n", "export default {'version':'7359c22c','entry':{'module':'/build/entry.client-HAB2YQCN.js','imports':['/build/_shared/chunk-4OJWVCZN.js','/build/_shared/chunk-O6YYFGCX.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-VVRFRWIV.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/$slug':{'id':'routes/$slug','parentId':'root','path':':slug','index':undefined,'caseSensitive':undefined,'module':'/build/routes/$slug-FYQMR4YE.js','imports':['/build/_shared/chunk-7F3C7OWH.js','/build/_shared/chunk-BVPJHGZZ.js','/build/_shared/chunk-CIE5ETH3.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/forgot-password':{'id':'routes/forgot-password','parentId':'root','path':'forgot-password','index':undefined,'caseSensitive':undefined,'module':'/build/routes/forgot-password-T22RPLY2.js','imports':['/build/_shared/chunk-CIE5ETH3.js'],'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-I7GJYIYL.js','imports':['/build/_shared/chunk-7F3C7OWH.js','/build/_shared/chunk-CIE5ETH3.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/register':{'id':'routes/register','parentId':'root','path':'register','index':undefined,'caseSensitive':undefined,'module':'/build/routes/register-J4T7R6GJ.js','imports':['/build/_shared/chunk-BVPJHGZZ.js','/build/_shared/chunk-CIE5ETH3.js'],'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/reset-password':{'id':'routes/reset-password','parentId':'root','path':'reset-password','index':undefined,'caseSensitive':undefined,'module':'/build/routes/reset-password-K6PHXNEM.js','imports':['/build/_shared/chunk-CIE5ETH3.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/sign-in':{'id':'routes/sign-in','parentId':'root','path':'sign-in','index':undefined,'caseSensitive':undefined,'module':'/build/routes/sign-in-RD6E2KOQ.js','imports':['/build/_shared/chunk-BVPJHGZZ.js','/build/_shared/chunk-CIE5ETH3.js'],'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/sign-out':{'id':'routes/sign-out','parentId':'root','path':'sign-out','index':undefined,'caseSensitive':undefined,'module':'/build/routes/sign-out-635EOYH3.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-7359C22C.js'};", "\nimport * as entryServer from \"C:\\\\Users\\\\user\\\\Documents\\\\otherprojs\\\\writing\\\\strapi\\\\Strapi-v4-Authentication-with-Remix\\\\remix-profiles\\\\app\\\\entry.server.tsx\";\nimport * as route0 from \"C:\\\\Users\\\\user\\\\Documents\\\\otherprojs\\\\writing\\\\strapi\\\\Strapi-v4-Authentication-with-Remix\\\\remix-profiles\\\\app\\\\root.tsx\";\nimport * as route1 from \"C:\\\\Users\\\\user\\\\Documents\\\\otherprojs\\\\writing\\\\strapi\\\\Strapi-v4-Authentication-with-Remix\\\\remix-profiles\\\\app\\\\routes\\\\forgot-password.tsx\";\nimport * as route2 from \"C:\\\\Users\\\\user\\\\Documents\\\\otherprojs\\\\writing\\\\strapi\\\\Strapi-v4-Authentication-with-Remix\\\\remix-profiles\\\\app\\\\routes\\\\reset-password.tsx\";\nimport * as route3 from \"C:\\\\Users\\\\user\\\\Documents\\\\otherprojs\\\\writing\\\\strapi\\\\Strapi-v4-Authentication-with-Remix\\\\remix-profiles\\\\app\\\\routes\\\\register.tsx\";\nimport * as route4 from \"C:\\\\Users\\\\user\\\\Documents\\\\otherprojs\\\\writing\\\\strapi\\\\Strapi-v4-Authentication-with-Remix\\\\remix-profiles\\\\app\\\\routes\\\\sign-out.tsx\";\nimport * as route5 from \"C:\\\\Users\\\\user\\\\Documents\\\\otherprojs\\\\writing\\\\strapi\\\\Strapi-v4-Authentication-with-Remix\\\\remix-profiles\\\\app\\\\routes\\\\sign-in.tsx\";\nimport * as route6 from \"C:\\\\Users\\\\user\\\\Documents\\\\otherprojs\\\\writing\\\\strapi\\\\Strapi-v4-Authentication-with-Remix\\\\remix-profiles\\\\app\\\\routes\\\\$slug.tsx\";\nimport * as route7 from \"C:\\\\Users\\\\user\\\\Documents\\\\otherprojs\\\\writing\\\\strapi\\\\Strapi-v4-Authentication-with-Remix\\\\remix-profiles\\\\app\\\\routes\\\\index.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/forgot-password\": {\n      id: \"routes/forgot-password\",\n      parentId: \"root\",\n      path: \"forgot-password\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/reset-password\": {\n      id: \"routes/reset-password\",\n      parentId: \"root\",\n      path: \"reset-password\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/register\": {\n      id: \"routes/register\",\n      parentId: \"root\",\n      path: \"register\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/sign-out\": {\n      id: \"routes/sign-out\",\n      parentId: \"root\",\n      path: \"sign-out\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/sign-in\": {\n      id: \"routes/sign-in\",\n      parentId: \"root\",\n      path: \"sign-in\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route5\n    },\n  \"routes/$slug\": {\n      id: \"routes/$slug\",\n      parentId: \"root\",\n      path: \":slug\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route6\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route7\n    }\n  };"],
  "mappings": "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",
  "names": []
}
